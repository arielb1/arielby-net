<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="/blog/" rel="alternate" type="text/html" /><updated>2022-01-22T21:23:38+02:00</updated><id>/blog/feed.xml</id><title type="html">Ariel Ben-Yehuda’s blog</title><subtitle>Random observations on programming, mathematics, and what's between them.</subtitle><entry><title type="html">PSA: How to safely check buffer sizes in C</title><link href="/blog/update/2014/04/23/c-bufcheck.html" rel="alternate" type="text/html" title="PSA: How to safely check buffer sizes in C" /><published>2014-04-23T21:13:36+03:00</published><updated>2014-04-23T21:13:36+03:00</updated><id>/blog/update/2014/04/23/c-bufcheck</id><content type="html" xml:base="/blog/update/2014/04/23/c-bufcheck.html"><![CDATA[<p>A common task in C is checking whether some data fits in a buffer. Unfortunately, doing it can be quite tricky, as [http://lwn.net/Articles/278137/] shows. Going by the standard, the problem is that in C creating a pointer beyond the end of an array is undefined behaviour – which means the compiler can do whatever it wants – including sending your customers’ credit card numbers to Russia (actually that’s quite a probable outcome, because, as the link shows, the compiler may introduce a security bug, which will be exploited and result in the credit card numbers being sent).</p>

<p>First, I’ll like to say that C does allow you to create a pointer to exactly-the-end-of-an-array (say, if A is an array of length 5, then you can create a pointer to (the non-existent) A[5], as long as you don’t dereference it).</p>

<p>The right thing to do is actually quite simple,</p>

<p><code style="color: turquoise; display: block; font-family: monospace; white-space: pre;" class="language-plaintext highlighter-rouge">size_t buffer_size = ...;
char * buffer = malloc(buffer_size);
if(!buffer) return NULL; // or something
...
unsigned int overhead = calculate_overhead_from_data();
unsigned int alleged_size = ask_data_what_the_size_is();
if(buffer_size &lt; overhead ||
   buffer_size - overhead &lt; alleged_size)
  fail();
</code></p>

<p>Or, say, when getting a packet:</p>

<p><code style="color: blue; display: block; font-family: monospace; white-space: pre;" class="language-plaintext highlighter-rouge">// assume packet_end is the actual end of the packet
if(packet_end - p &lt; 2*sizeof(unsigned int)) fail();
unsigned int len = read_uint(p);
p += sizeof(unsigned int);
﻿
unsigned int another_field = read_uint(p);
p += sizeof(unsigned int);
﻿
if(packet_end - p &lt; len) fail();
DO_SOMETHING_WITH_REST_OF_PACKET
</code></p>

<p>The things you must NEVER do are this:</p>

<p><code style="color: #800000; display: block; font-family: monospace; white-space: pre;" class="language-plaintext highlighter-rouge">// CODE IS WRONG AND EVIL
// DO NOT USE UNLESS YOU ARE INTENTIONALLY INTRODUCING A BACKDOOR
// assume packet_end is the actual end of the packet
if(packet_end - p &lt; 2*sizeof(unsigned int)) fail();
unsigned int len = read_uint(p);
p += sizeof(unsigned int);
﻿
</code>
<code style="color: #ff0000; display: block; font-family: monospace; white-space: pre;" class="language-plaintext highlighter-rouge">// WRONG!
unsigned int another_field = read_uint(p);
p += sizeof(unsigned int);
if(p + len &gt; packet_end) fail();
﻿
</code>
<code style="color: #ff6600; display: block; font-family: monospace; white-space: pre;" class="language-plaintext highlighter-rouge">// ALSO WRONG!
if(packet_end - p &lt; len + sizeof(unsigned int)) fail()
﻿
</code>
<code style="color: #800000; display: block; font-family: monospace; white-space: pre;" class="language-plaintext highlighter-rouge">DO_SOMETHING_WITH_REST_OF_PACKET
</code></p>

<p>The code in red tests for overflow by first creating a pointer overflowing a buffer, which overflows a buffer and begets undefined behaviour, and then tries to check the length, but the check comes too late – the program’s behaviour is already undefined, and the compiler, knowing so, may remove the check.
The code in orange is slightly less wrong – the check is actually well-defined, because unsigned integer addition is defined as addition modulo <code class="language-plaintext highlighter-rouge">256^sizeof(size_t)</code> – however, it checks the wrong thing, because if an attacker puts, say, <code class="language-plaintext highlighter-rouge">len=(size_t)-sizeof(unsigned int)</code>, then <code class="language-plaintext highlighter-rouge">len+sizeof(unsigned int) = -4+4 = 0</code>, and the check will succeed and copy a huge amount of data off the end of the buffer, causing problems. I repeat, the red and orange codes are evil – use the blue or turquoise code unless you are introducing a backdoor.</p>

<p>Note that in these examples, <code class="language-plaintext highlighter-rouge">read_uint</code> is assumed to be a macro/function that reads <code class="language-plaintext highlighter-rouge">sizeof(unsigned int)=4</code> bytes from a <code class="language-plaintext highlighter-rouge">char*</code> as an unsigned integer (this isn’t the same as <em>(int</em>)packet, because of alignment and endianness issues) – there does not seem to be any standard here. Assuming data is big-endian (as in most network protocols), it can be defined as:</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="kr">inline</span> <span class="kt">unsigned</span> <span class="kt">int</span> <span class="nf">read_uint</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span>
  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">4</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="c1">// casting because char is signed.</span>
    <span class="n">r</span> <span class="o">=</span> <span class="p">((</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="p">)</span><span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">+</span> <span class="p">(</span><span class="n">r</span><span class="o">&lt;&lt;</span><span class="mi">8</span><span class="p">);</span>
  <span class="k">return</span> <span class="n">r</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>]]></content><author><name></name></author><category term="update" /><summary type="html"><![CDATA[A common task in C is checking whether some data fits in a buffer. Unfortunately, doing it can be quite tricky, as [http://lwn.net/Articles/278137/] shows. Going by the standard, the problem is that in C creating a pointer beyond the end of an array is undefined behaviour – which means the compiler can do whatever it wants – including sending your customers’ credit card numbers to Russia (actually that’s quite a probable outcome, because, as the link shows, the compiler may introduce a security bug, which will be exploited and result in the credit card numbers being sent).]]></summary></entry><entry><title type="html">On Exceptions</title><link href="/blog/update/2014/03/25/exceptions.html" rel="alternate" type="text/html" title="On Exceptions" /><published>2014-03-25T20:13:36+02:00</published><updated>2014-03-25T20:13:36+02:00</updated><id>/blog/update/2014/03/25/exceptions</id><content type="html" xml:base="/blog/update/2014/03/25/exceptions.html"><![CDATA[<p>Another programming subject that tends to confuse people is Exceptions. It appears that each programming language (including <em>each</em> machine code architecture) and each operating system has its own subtly-incompatible version.</p>

<p>On the surface, the idea appears quite simple: sometimes exceptional situations occur, and the program must handle them. However, when you dig deeper, you find several similar but distinct ways of thinking about it. I’ll try to detail the ones I heard about. Note that people occasionally design one implementation but actually implement another!</p>

<p>The oldest way of thinking about exceptions is as return codes – like in C. They have the advantages of being standard within a language and containing more information than a typical error code, as well as not overloading the return output. This method looks quite fine on the surface, but it loses the explicitness of error codes, causing many a subtle bug.</p>

<p>The second way I found is the rather operational way of exceptions being a “longjmp to a stored handler”. This kind of thinking is generally fine when programming is side-effect-free but can cause quite a bit of a mess otherwise, especially if garbage-collection is missing.</p>

<p>The essential problem in these methods is that exceptions add many paths to a program that are rarely tested. This is especially pronounced in out-of-memory exceptions, which in many programming styles can essentially occur every second line, but in practice almost never happen.</p>

<p>Note that in many of these cases the program should just exit. It was noticed that all languages already have a similar “mechanism” to this – by the halting problem functions can always use an infinite amount of time before returning (observe that a common mechanism of dealing with OOM – paging/swapping – can, in particularly bad situations, cause functions to use a practically infinite amount of time and you can’t do much about it). In some ways this behaviour is not that different from a hard-reset of the computer (e.g. the power being pulled) – which may very well be a (user-caused) consequence of it happening to a critical program.</p>

<p>Papers typically call that behaviour divergence for rather obscure reasons, which is the name I’ll use in the rest of this post. I’ll like to note that C11 actually prohibits it, in clause 1.10/24:
  The implementation may assume that any thread will eventually do one of the following:</p>
<ul>
  <li>terminate,</li>
  <li>make a call to a library I/O function,</li>
  <li>access or modify a volatile object, or</li>
  <li>perform a synchronization operation or an atomic operation</li>
</ul>

<p>However, several programs have decided to use a divergence-like mechanism to handle (some kinds of) exceptions – a good example is most GUI toolkits, which like to abort on memory allocation failure. This has the advantage of essentially not having error paths to test.</p>

<p>However, this method has the big disadvantage of leaking the entire program on an exception. Often, this isn’t an issue: unlike what many CS instructors believe, the OS keeps track of a program’s resources and frees them when the program exits (in any way). But sometimes one wants only an operation to diverge – consider the case of a web browser with 30 tabs open, when the user enters a page with a badly-designed script that uses many gigabytes of memory – one (of course) won’t like to leak the entire tab, but one won’t like to close the entire browser either.</p>

<p>For these kinds of cases, one wants a cancellation method. This is quite similar to divergence, except it releases the resources used by the program. As I said earlier, typical operating systems already provide it if the program is separated into processes, and a similar mechanism, separating a program into disjoint heaps, is often used to have the advantage of this method without these issues.</p>

<p>However, canceling a tangled program is generally a tangled issue that I will leave for a later post.</p>

<p>CHANGES 2017/01/27 – fixed formatting</p>]]></content><author><name></name></author><category term="update" /><summary type="html"><![CDATA[Another programming subject that tends to confuse people is Exceptions. It appears that each programming language (including each machine code architecture) and each operating system has its own subtly-incompatible version.]]></summary></entry><entry><title type="html">On Pseudorandomness</title><link href="/blog/update/2014/03/24/pseudo.html" rel="alternate" type="text/html" title="On Pseudorandomness" /><published>2014-03-24T20:13:36+02:00</published><updated>2014-03-24T20:13:36+02:00</updated><id>/blog/update/2014/03/24/pseudo</id><content type="html" xml:base="/blog/update/2014/03/24/pseudo.html"><![CDATA[<p>It has been said many times that the easiest way to break a crypto-system is by breaking its random-number generator. This seems to have a basis in practice – the PS3<a href="http://events.ccc.de/congress/2010/Fahrplan/attachments/1780_27c3_console_hacking_2010.pdf">1</a> and Debian<a href="http://lwn.net/Articles/282038/">2</a> are only 2 of the most famous serious flaws caused by one. An important cause for this is that the PRNG (for obvious reasons) aren’t really visible on the wire or in other places. Another important cause is that PRNGs are used to perform several different but related tasks in a confusing way that isn’t really documented anywhere.</p>

<p>I can’t do anything to help the former problem, but I’ll try to explain the latter.</p>

<p>I will use PRNGs to refer to both the cryptographically-secure ones and the non-cryptographically-secure ones together (rather then calling the cryptographically-secure ones CSPRNGs). This is because “cryptographic-security” is only one of the axes that make a PRNG useful (or secure) for a purpose.</p>

<p>Almost always, one prefers programs to be deterministic (if only because that makes debugging much easier). To help it, CPUs are typically written to behave in a highly deterministic manner (except when one uses shared-memory parallelism, but that’s a problem for another post). However, sometimes, this property can be sometimes a problem. A few cases when this occurs are:</p>

<ol>
  <li>Some algorithm works properly in the average case, but displays bad behaviour in the worst case, which is triggered either by being similar-in-structure to the program (as in quicksort on a sorted list) or by input intentionally crafted by an adversary (as in Hash-Table DoS<a href="http://events.ccc.de/congress/2011/Fahrplan/attachments/2007_28C3_Effective_DoS_on_web_application_platforms.pdf">3</a>). Note that in some cases, typically when a program does some kind of Monte-Carlo simulation (i.e. estimates a distribution by sampling, e.g. fuzzing), it can return wrong results rather than just taking a long time to finish.</li>
  <li>Often, one needs to generate unique identifiers for some purpose and does not care if the length is overly long. Cryptographic systems often require this to avoid replay attacks (another confusing thing that I am going to write a post about) and keymat-reuse issues (sometimes called many-time-pads).</li>
  <li>One needs to generate a secret key that cannot be predicted by an adversary, perhaps even for a long amount of time – decades, in a few cases. (e.g. all crypto stuff – short-term authentication cookies to a browser game, long-term keys protecting Top Secret documents, and everything between them).</li>
  <li>Stream Ciphers – if a completely pseudorandom stream is xorred with a secret, the secret can be recovered from the result only by these knowing the stream. This provides a fast, securely-implementable form of encryption.</li>
</ol>

<p>There are probably more uses, but these are the most common.</p>

<p>It seems that there are four properties of PRNGs that are used in the application:</p>

<ol>
  <li>Weak Unpredictability – Adversaries can’t predict the PRNG’s output. However, the set of outputs may still be relatively small so a brute-force attack may be possible. This is quite similar to strong unpredictability detailed below.</li>
  <li>Strong Unpredictability – Adversaries can’t predict the PRNG’s output or iterate over all possibilities. For practical reasons (e.g. backups), this is often divided into short-term and long-term unpredictability, where long-term secrets shouldn’t be stored in the clear on non-specially-protected devices. An annoying problem with this property is that a backdoor can make a PRNG predictable to these in the know while being random to everybody else – making checking for it impossible – and that is the classic failure mode of this property.</li>
  <li>Uniqueness – The results are distinct in different runs. This is distinct from unpredictability – generating a single stream with a PRNG from a secret seed but not saving the current position when the system reboots, from example, can destroy Uniqueness while preserving Unpredictability. The classic failure mode is a guard asking the same challenge and accepting the same response every day – allowing eavesdroppers to simply repeat it.</li>
  <li>Whiteness – The stream does not have visible internal correlations. This is the property typically checked by “randomness tests” (e.g. Diehard) and often confused with Pseudorandomness. This can be further divided into Classical Whiteness – the absence of obvious patterns, and Cryptographic Whiteness – which requires the absence of all computably-discoverable patterns, which is important in e.g. stream ciphers. The classic failure mode is a subtle internal bias – slowly leaking a secret over multiple ciphertexts.</li>
</ol>

<p>These properties can be combined in various ways – a stream, for example, can be Unpredictable and Unique, both not Unpredictably Unique, for example when a professor generates an exam by randomly selecting a few questions from a relatively small and constant set. Concatenating streams creates a stream that has the union of the properties of the substreams, but not together.</p>

<p>Preventing worst-cases typically requires a small amount of (Classical) Whiteness that in adversarial scenarios is Weakly Unpredictable (of course, if one leaks the randomness via the algorithm results, then ze needs not to reuse it). Note that CBC nonce problems<a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.61.5887&amp;rep=rep1&amp;type=pdf">4</a> basically require this.</p>

<p>Unique Identifers and replay prevention (of course) require Uniqueness and only Uniqueness.</p>

<p>Secret Keys require Unpredictability, and often also require Uniqueness.</p>

<p>Stream Ciphers require all 3 together – Unpredictably Uniquely White data.</p>

<p>Clocks and Counters provide Uniqueness, but not Unpredictability.</p>

<p>Hash Functions typically take a stream, combine its properties and add Whiteness – so <code class="language-plaintext highlighter-rouge">H(secret||ctr++)</code> has all 3 properties together – the secret gives Unpredictability, the counter gives Uniqueness, and the hash combines them and gives Whiteness. However, hash functions don’t generate Unpredictability or Uniqueness – <code class="language-plaintext highlighter-rouge">H(current-time)</code> is quite predictable and H(secret) isn’t unique.</p>

<p>Hardware RNGs often provide Unique Unpredictability, but often not Whiteness.</p>]]></content><author><name></name></author><category term="update" /><summary type="html"><![CDATA[It has been said many times that the easiest way to break a crypto-system is by breaking its random-number generator. This seems to have a basis in practice – the PS31 and Debian2 are only 2 of the most famous serious flaws caused by one. An important cause for this is that the PRNG (for obvious reasons) aren’t really visible on the wire or in other places. Another important cause is that PRNGs are used to perform several different but related tasks in a confusing way that isn’t really documented anywhere.]]></summary></entry><entry><title type="html">Using Higher-Order Macros in C to implement Monomorphisation</title><link href="/blog/update/2014/03/17/hom-mono.html" rel="alternate" type="text/html" title="Using Higher-Order Macros in C to implement Monomorphisation" /><published>2014-03-17T20:13:36+02:00</published><updated>2014-03-17T20:13:36+02:00</updated><id>/blog/update/2014/03/17/hom-mono</id><content type="html" xml:base="/blog/update/2014/03/17/hom-mono.html"><![CDATA[<p>One of C++s most-often-cited advantages (over any language) is it ability to monomorphise abstracted calls via templates – to reuse code without the overhead of indirection and virtual method calls.</p>

<p>As a part of the language, the only mainstream language that supports this feature is C++, although several novel languages, like Haskell and Rust, support it too. This is claimed to account for much of its speed advantage over managed languages, such as Java, in abstracted code.</p>

<p>Because of this, I was disappointed when it turned out that I have to write my supposed-to-be-fast alpha-beta implementation in C for my software project in a generic manner, which would seemingly require a virtual call every node and probably an allocation (because different boards have different sizes).</p>

<p>I thought about this problem and I think I found a solution. Before presenting it, I would like to describe a few quite-common C preprocessor tricks.</p>

<h3 id="trick-1--foreach-in-c">Trick 1 – foreach in C:</h3>

<p>This is a quite old trick that can be used to implement foreach in C – the oldest use I found is in BSD’s <code class="language-plaintext highlighter-rouge">queue.h</code></p>

<p>I think the best way to introduce it is by example – which iterates over a list-style linked list.</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="cp">#include &lt;stdio.h&gt;
</span>
<span class="k">struct</span> <span class="n">cons</span> <span class="p">{</span>
  <span class="kt">void</span> <span class="o">*</span> <span class="n">car</span><span class="p">;</span>
  <span class="k">struct</span> <span class="n">cons</span> <span class="o">*</span> <span class="n">cdr</span><span class="p">;</span>
<span class="p">};</span>

<span class="c1">// C99 trick - the struct is freed at the end of the</span>
<span class="c1">//   containing block.</span>
<span class="c1">// NOTE: in C++, it's freed at the end of the containing</span>
<span class="c1">//   STATEMENT - which still works here.</span>
<span class="cp">#define CONS(car, cdr) (&amp;(struct cons){(car), (cdr)})
</span>
<span class="cp">#define FOREACH_CONS(cur, name) \
  for(cur = (name); cur; cur = cur-&gt;cdr)
</span>
<span class="c1">// Assumes l is a list of nul-terminated strings and print them</span>
<span class="c1">//   concatenated</span>
<span class="kt">void</span> <span class="nf">print_all_members</span><span class="p">(</span><span class="k">struct</span> <span class="n">cons</span> <span class="o">*</span> <span class="n">l</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">struct</span> <span class="n">cons</span> <span class="o">*</span> <span class="n">cur</span><span class="p">;</span>
  <span class="n">FOREACH_CONS</span><span class="p">(</span><span class="n">cur</span><span class="p">,</span> <span class="n">l</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"%s"</span><span class="p">,</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span> <span class="n">cur</span><span class="o">-&gt;</span><span class="n">car</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
   <span class="n">print_all_members</span><span class="p">(</span><span class="n">CONS</span><span class="p">(</span><span class="s">"Hello"</span><span class="p">,</span> <span class="n">CONS</span><span class="p">(</span><span class="s">", "</span><span class="p">,</span>
                     <span class="n">CONS</span><span class="p">(</span><span class="s">"World!"</span><span class="p">,</span> <span class="n">CONS</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="mi">0</span><span class="p">)))));</span>
   <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>Here, the user provides a variable of the appropriate type as cur, and name should hold the input list and the macro does the rest.</p>

<h3 id="trick-2--higher-order-macros">Trick 2 – higher order macros:</h3>

<p>If you pass the name of a functional macro to a C preprocessor macro, the last macro can pass it’s own parameters.</p>

<p>So:</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="cp">#include &lt;stdio.h&gt;
</span>
<span class="cp">#define HIGHER_ORDER(u) do { u(1+5,8+1); } while(0)
#define MULT(a,b) printf("%d\n", a*b)
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// This expands to do { MULT(1+5,8+1); } while(0)</span>
  <span class="c1">// Which expands to do { printf("%d\n", 1+5*8+1); } while(0)</span>
  <span class="n">HIGHER_ORDER</span><span class="p">(</span><span class="n">MULT</span><span class="p">);</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>Prints 42.</p>

<p>Now for the negamax implementation:</p>

<p>Textbook negamax/alpha-beta looks like this (credit: Wikipedia):</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>function pvs(node, depth, α, β, color)
    if node is a terminal node or depth = 0
        return color × the heuristic value of node
    for each child of node
        score := -pvs(child, depth-1, -β, -α, -color)
        α := max(α, score)
        if α ≥ β
            break (* beta cut-off *)
    return α
</code></pre></div></div>

<p>If your game implementation keeps the board internally, and cloning boards does not require allocations, you can implement FOREACH_CHILD in the following manner:</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="k">struct</span> <span class="n">my_game</span> <span class="p">{</span>
  <span class="kt">char</span> <span class="n">board</span><span class="p">[</span><span class="n">WIDTH</span><span class="p">][</span><span class="n">HEIGHT</span><span class="p">];</span>
<span class="p">};</span>

<span class="c1">// assume implemented</span>
<span class="kt">int</span> <span class="nf">my_eval_game</span><span class="p">(</span><span class="k">struct</span> <span class="n">my_game</span> <span class="k">const</span> <span class="o">*</span><span class="p">);</span>
<span class="k">struct</span> <span class="n">my_game</span> <span class="nf">make_move</span><span class="p">(</span><span class="k">struct</span> <span class="n">my_game</span> <span class="k">const</span> <span class="o">*</span><span class="p">,</span> <span class="k">struct</span> <span class="n">move</span><span class="p">);</span>
<span class="c1">// Standard iterator methods - assumes a sentinel move for</span>
<span class="c1">//   which is_move_valid returns false</span>
<span class="k">struct</span> <span class="n">move</span> <span class="nf">my_first_move</span><span class="p">(</span><span class="k">struct</span> <span class="n">my_game</span> <span class="k">const</span> <span class="o">*</span><span class="p">);</span>
<span class="k">struct</span> <span class="n">move</span> <span class="nf">my_next_move</span><span class="p">(</span><span class="k">struct</span> <span class="n">my_game</span> <span class="k">const</span> <span class="o">*</span><span class="p">,</span>
    <span class="k">struct</span> <span class="n">move</span> <span class="n">cur</span><span class="p">);</span>
<span class="n">bool</span> <span class="nf">is_my_move_valid</span><span class="p">(</span><span class="k">struct</span> <span class="n">move</span><span class="p">);</span>

<span class="cp">#define MY_FOREACH_CHILD(CUR, GAME)                           \
  for(struct move _foreach_child_cur = my_first_move(GAME);   \
      is_my_move_valid(GAME, _foreach_child_cur) &amp;&amp;           \
      (CUR = my_make_move(GAME, _foreach_child_cur), 1);      \
      _foreach_child_cur = my_next_move(GAME,                 \
                                        _foreach_child_cur))</span></code></pre></figure>

<p>You can implement alpha-beta by basically copying from the textbook (in a separate header), like this:</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="cp">#define ALPHABETA_IMPL(SELF, NODE, FOREACH_CHILD, EVAL_GAME) \
static int SELF(NODE *node, int depth, int alpha,            \
    int beta, int color) {                                   \
  if(depth == 0) return EVAL_GAME(node) * color;             \
  int score = INT_MIN;                                       \
  NODE cur;                                                  \
                                                             \
  FOREACH_CHILD(cur, node) {                                 \
    score = -SELF(&amp;cur, depth-1, -beta, -alpha, -color);     \
    if(alpha &lt; score) alpha = score;                         \
    if(alpha &gt;= beta) break;                                 \
  }                                                          \
                                                             \
    </span><span class="cm">/* return objective score if no moves were possible */</span><span class="cp">   \
  return score == INT_MIN ? EVAL_GAME(node) * color : alpha; \
}</span></code></pre></figure>

<p>Note that I use INT_MIN as a sentinel score to avoid needing to check if moves were made. Then it can be used like this:</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="n">ALPHABETA_IMPL</span><span class="p">(</span><span class="n">my_minmax</span><span class="p">,</span> <span class="k">struct</span> <span class="n">my_game</span><span class="p">,</span> <span class="n">FOREACH_CHILD_MYGAME</span><span class="p">,</span>
  <span class="n">my_eval_game</span><span class="p">)</span></code></pre></figure>

<p>Which I think is quite elegant, actually.</p>

<p>Next: how I am planning to implement virtual calls.</p>]]></content><author><name></name></author><category term="update" /><summary type="html"><![CDATA[One of C++s most-often-cited advantages (over any language) is it ability to monomorphise abstracted calls via templates – to reuse code without the overhead of indirection and virtual method calls.]]></summary></entry></feed>